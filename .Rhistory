),
fluidRow(
box(
width = 12, status = "info",
title = "Tatum",
plotOutput('plot_track_tatum'),
),
),
fluidRow(
box(
width = 12, status = "info",
title = "Loudness",
radioGroupButtons(
inputId = "in_segments",
label = "Label",
choices = c("loudness_start",
"loudness_max"),
status = "primary",
checkIcon = list(
yes = icon("ok",
lib = "glyphicon"),
no = icon("remove",
lib = "glyphicon"))
),
plotOutput('plot_track_segments'),
),
),
fluidRow(
box(
width = 12, status = "info",
title = "Sections",
radioGroupButtons(
inputId = "in_sections",
label = "Label",
choices = c("confidence",
"loudness",'tempo','tempo_confidence',
'key_confidence','mode_confidence',
'time_signature_confidence'),
status = "primary",
checkIcon = list(
yes = icon("ok",
lib = "glyphicon"),
no = icon("remove",
lib = "glyphicon"))
),
plotOutput('plot_track_sections'),
),
),
),
#---------------------------------------------
#Lyrics page
#---------------------------------------------
tabItem("lyrics",
fluidRow(
box(
width = 12, status = "info",
title = "Artist lyrics search",
searchInput(
inputId = "artist_search_genius",
label = "Click search icon to update or hit 'Enter'",
placeholder = "Ebi",
btnSearch = icon("search"),
btnReset = icon("remove"),
width = "100%"
),
),
box(
width = 12, status = "info",
title = "artist latest song word cloud",
wordcloud2Output('plot_word_cloud_artist'),
),
),
fluidRow(
box(
width = 12, status = "info",
title = "Song lyrics search",
searchInput(
inputId = "song_search_genius",
label = "Click search icon to update or hit 'Enter'",
placeholder = "Love",
btnSearch = icon("search"),
btnReset = icon("remove"),
width = "100%"
),
),
box(
width = 12, status = "info",
title = "song latest song word cloud",
wordcloud2Output('plot_word_cloud_song'),
),
),
fluidRow(
box(
width = 12, status = "info",
title = "Topic lyrics search",
searchInput(
inputId = "topic_search_genius",
label = "Click search icon to update or hit 'Enter'",
placeholder = "Rap God",
btnSearch = icon("search"),
btnReset = icon("remove"),
width = "100%"
),
),
box(
width = 12, status = "info",
title = "song latest song word cloud",
wordcloud2Output('plot_word_cloud_topic'),
),
),
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output,session) {
#---------------------------------------------
#Artist page
#---------------------------------------------
find_artist<-reactive({
find_artist<-search_spotify(
input$artist_id_search,
type = c( "track"),
market = NULL,
limit = 1,
offset = 0,
include_external = NULL,
authorization = get_spotify_access_token(),
include_meta_info = FALSE
)
})
b<-reactive({
find_artist<-find_artist()
get_artist_audio_features(
artist = find_artist[[1]][[1]]['id'],
include_groups = "album",
return_closest_artist = TRUE,
dedupe_albums = TRUE,
market = NULL,
authorization = get_spotify_access_token()
)
})
output$distPlot <- renderPlot({
b<-b()
b<-b%>%select(danceability,energy,album_release_year,valence)
ggplot(b,aes(danceability,energy,size=valence,color=album_release_year))+geom_point()+
theme_wsj() + ggtitle('danceability VS energy')+
theme(plot.title = element_text(size = 20, face = "bold"))+
xlab("danceability")+
ylab("energy")
})
output$distPlot2 <- renderPlot({
b<-b()
ggplot(b,aes(tempo,fill=album_release_year))+geom_boxplot()+
theme_wsj() + ggtitle('Tempo Stutus')+ coord_flip()+
theme(plot.title = element_text(size = 13, face = "bold"))
})
output$distPlot3 <- renderPlot({
b<-b()
b%>%select(liveness)%>%
ggplot(aes(liveness))+geom_boxplot()+
theme_wsj() + ggtitle('Liveliness Stutus')+ coord_flip()+
theme(plot.title = element_text(size = 13, face = "bold"))
})
output$distPlot4 <- renderPlot({
b<-b()
b%>%select(acousticness)%>%
ggplot(aes(acousticness))+geom_boxplot()+
theme_wsj() + ggtitle('acousticness Stutus')+ coord_flip()+
theme(plot.title = element_text(size = 13, face = "bold"))
})
output$distPlot5 <- renderPlot({
b<-b()
b%>%select(duration_ms)%>%
ggplot(aes(duration_ms/60000))+geom_boxplot()+
theme_wsj() + ggtitle('duration minuts Stutus')+ coord_flip()+
theme(plot.title = element_text(size = 13, face = "bold"))
})
output$distPlot6 <- renderPlot({
b<-b()
b%>%select(danceability)%>%
ggplot(aes(danceability))+geom_boxplot()+
theme_wsj() + ggtitle('danceability Stutus')+ coord_flip()+
theme(plot.title = element_text(size = 13, face = "bold"))
})
output$distPlot7 <- renderPlot({
b<-b()
b%>%select(speechiness)%>%
ggplot(aes(speechiness))+geom_boxplot()+
theme_wsj() + ggtitle('speechiness Stutus')+ coord_flip()+
theme(plot.title = element_text(size = 13, face = "bold"))
})
output$distPlot8 <- renderPlot({
b<-b()
b%>%select(loudness)%>%
ggplot(aes(loudness))+geom_boxplot()+
theme_wsj() + ggtitle('loudness Stutus')+ coord_flip()+
theme(plot.title = element_text(size = 13, face = "bold"))
})
output$distPlot9 <- renderPlot({
b<-b()
b%>%select(energy)%>%
ggplot(aes(energy))+geom_boxplot()+
theme_wsj() + ggtitle('energy Stutus')+ coord_flip()+
theme(plot.title = element_text(size = 13, face = "bold"))
})
#---------------------------------------------
#tracks page
#---------------------------------------------
find_track<-reactive({
find_track<-search_spotify(
input$track_id_search,
type = c("track"),
market = NULL,
limit = 1,
offset = 0,
include_external = NULL,
authorization = get_spotify_access_token(),
include_meta_info = FALSE
)
})
ata<-reactive({
find_track<-find_track()
ata<-get_track(find_track$id)
})
afe<-reactive({
find_track<-find_track()
afe<-get_track_audio_features(find_track$id)
})
aua<-reactive({
find_track<-find_track()
aua<-get_track_audio_analysis(find_track$id)
})
output$trak_table_ata<-renderTable({
ata<-ata()
track_aua<-list()
track_aua$track_name<-ata[['name']][[1]]
track_aua$album_name<-ata[["album"]][["name"]][[1]]
track_aua$artist_name<-ata[["album"]][["artists"]][["name"]][[1]]
track_aua<-data.frame(track_aua)
})
output$trak_table_auf<-renderTable({
afe<-afe()
afe%>%select(danceability:tempo,duration_ms)%>%mutate(duration=duration_ms/60000)%>%select(danceability:tempo,duration)
})
output$trak_table_aua<-renderTable({
aua<-aua()
#ata<-get_track(find_track$id)
track_aua<-data.frame(aua$track)
track_aua<-track_aua%>%select(num_samples,duration,analysis_sample_rate,end_of_fade_in:time_signature_confidence)
})
output$plot_track_bar <- renderPlot({
aua<-aua()
track_aua<-data.frame(aua$track)
track_aua<-track_aua%>%select(num_samples,duration,analysis_sample_rate,end_of_fade_in:time_signature_confidence)
bars_aua<-data.frame(aua$bars)
beats_aua<-data.frame(aua$beats)
sections_aua<-data.frame(aua$sections)
sections_aua<-sections_aua%>%select(start,confidence:tempo_confidence,key_confidence,mode_confidence,time_signature_confidence)
segments_aua<-data.frame(aua$segments)
segments_aua<-segments_aua%>%select(start:loudness_end)
tatums_aua<-data.frame(aua$tatums)
bars_aua%>%ggplot(aes(start,confidence))+geom_line()+
theme_wsj()
})
output$plot_track_beats <- renderPlot({
aua<-aua()
track_aua<-data.frame(aua$track)
track_aua<-track_aua%>%select(num_samples,duration,analysis_sample_rate,end_of_fade_in:time_signature_confidence)
bars_aua<-data.frame(aua$bars)
beats_aua<-data.frame(aua$beats)
sections_aua<-data.frame(aua$sections)
sections_aua<-sections_aua%>%select(start,confidence:tempo_confidence,key_confidence,mode_confidence,time_signature_confidence)
segments_aua<-data.frame(aua$segments)
segments_aua<-segments_aua%>%select(start:loudness_end)
tatums_aua<-data.frame(aua$tatums)
beats_aua%>%ggplot(aes(start,confidence))+geom_line()+
theme_wsj()
})
output$plot_track_tatum <- renderPlot({
aua<-aua()
track_aua<-data.frame(aua$track)
track_aua<-track_aua%>%select(num_samples,duration,analysis_sample_rate,end_of_fade_in:time_signature_confidence)
bars_aua<-data.frame(aua$bars)
beats_aua<-data.frame(aua$beats)
sections_aua<-data.frame(aua$sections)
sections_aua<-sections_aua%>%select(start,confidence:tempo_confidence,key_confidence,mode_confidence,time_signature_confidence)
segments_aua<-data.frame(aua$segments)
segments_aua<-segments_aua%>%select(start:loudness_end)
tatums_aua<-data.frame(aua$tatums)
tatums_aua%>%ggplot(aes(start,confidence))+geom_line()+
theme_wsj()
})
output$plot_track_segments <- renderPlot({
aua<-aua()
track_aua<-data.frame(aua$track)
track_aua<-track_aua%>%select(num_samples,duration,analysis_sample_rate,end_of_fade_in:time_signature_confidence)
bars_aua<-data.frame(aua$bars)
beats_aua<-data.frame(aua$beats)
sections_aua<-data.frame(aua$sections)
sections_aua<-sections_aua%>%select(start,confidence:tempo_confidence,key_confidence,mode_confidence,time_signature_confidence)
segments_aua<-data.frame(aua$segments)
segments_aua<-segments_aua%>%select(start:loudness_end)
segments_aua<-data.frame(segments_aua)
ggplot(segments_aua,aes(start,.data[[input$in_segments]]))+geom_line()+
theme_wsj()
})
output$plot_track_sections <- renderPlot({
aua<-aua()
track_aua<-data.frame(aua$track)
track_aua<-track_aua%>%select(num_samples,duration,analysis_sample_rate,end_of_fade_in:time_signature_confidence)
bars_aua<-data.frame(aua$bars)
beats_aua<-data.frame(aua$beats)
sections_aua<-data.frame(aua$sections)
sections_aua<-sections_aua%>%select(start,confidence:tempo_confidence,key_confidence,mode_confidence,time_signature_confidence)
segments_aua<-data.frame(aua$segments)
segments_aua<-segments_aua%>%select(start:loudness_end)
segments_aua<-data.frame(segments_aua)
ggplot(sections_aua,aes(start,.data[[input$in_sections]]))+geom_line()+
theme_wsj()
})
#---------------------------------------------
#Lyrics page
#---------------------------------------------
#Artist
artist_lyrics<-reactive({
#Ebi
artist_lyrics<-geniusr::search_song(input$artist_search_genius, n_results = 20, access_token = genius_token())
artist_lyrics<-data.frame(artist_lyrics)
artist_lyrics['lyrics']<-NA
for (i in 1:nrow(artist_lyrics)){
link<-artist_lyrics$song_lyrics_url[i]
doc_link<-read_html(link)
c<-doc_link%>%html_elements("div[class='Lyrics__Container-sc-1ynbvzw-6 jYfhrf']")%>%html_text2(preserve_nbsp = TRUE)
d<-NULL
if (length(c)>1){
for (j in 1:length(c)){
d<-paste(d,c[j])
}
}else{
d<-c[1]
}
d<-as.character(d)
artist_lyrics$lyrics[i]<-d
}
artist_lyrics <- mutate(artist_lyrics, lyrics = gsub(x = lyrics, pattern = "[Bridge]", replacement = " "))
artist_lyrics <- mutate(artist_lyrics, lyrics = gsub(x = lyrics, pattern = "[Verse]", replacement = " "))
artist_lyrics <- mutate(artist_lyrics, lyrics = gsub(x = lyrics, pattern = "[Chorus]", replacement = " "))
artist_lyrics <- mutate(artist_lyrics, lyrics = gsub(x = lyrics, pattern = "[0-9]+|[[:punct:]]|\\(.*\\)", replacement = " "))
artist_lyrics <- mutate(artist_lyrics, lyrics = gsub(x = lyrics, pattern = "\n", replacement = " "))
})
artist_lyrics_tokenized<-reactive({
artist_lyrics<-artist_lyrics()
artist_lyrics_tokenized <- artist_lyrics() %>% unnest_tokens(output = "word",
input = lyrics,
token = "words",
drop=FALSE,to_lower=TRUE)
artist_lyrics_tokenized<-artist_lyrics_tokenized%>%select(song_id:artist_name,word)
artist_lyrics_tokenized <- filter(artist_lyrics_tokenized, substr(word, 1, 1) != '#',
substr(word, 1, 1) != '@')
correct_spelling <- function(input) {
output <- case_when(
# any manual corrections
input == 'license' ~ 'licence',
# check and (if required) correct spelling
!hunspell_check(input, dictionary('en_GB')) ~
hunspell_suggest(input, dictionary('en_GB')) %>%
# get first suggestion, or NA if suggestions list is empty
map(1, .default = NA) %>%
unlist(),
TRUE ~ input # if word is correct
)
ifelse(is.na(output), input, output)
}
artist_lyrics_tokenized <- artist_lyrics_tokenized %>%  mutate(suggestion = correct_spelling(word))
artist_lyrics_tokenized <- artist_lyrics_tokenized %>% anti_join(stopwords)
artist_lyrics_tokenized <- artist_lyrics_tokenized %>% dplyr::count(song_id,suggestion)
artist_lyrics_tokenized<-artist_lyrics_tokenized%>%select(suggestion,n)
artist_lyrics_tokenized<-artist_lyrics_tokenized%>%filter(nchar(suggestion)>3)
})
output$plot_word_cloud_artist<-renderWordcloud2({
artist_lyrics_tokenized<-artist_lyrics_tokenized()
wordcloud2(artist_lyrics_tokenized, size=2)
})
#--------------------
#Song
song_lyrics<-reactive({
#Ebi
song_lyrics<-geniusr::search_song(input$song_search_genius, n_results = 20, access_token = genius_token())
song_lyrics<-data.frame(song_lyrics)
song_lyrics['lyrics']<-NA
for (i in 1:nrow(song_lyrics)){
link<-song_lyrics$song_lyrics_url[i]
doc_link<-read_html(link)
c<-doc_link%>%html_elements("div[class='Lyrics__Container-sc-1ynbvzw-6 jYfhrf']")%>%html_text2(preserve_nbsp = TRUE)
d<-NULL
if (length(c)>1){
for (j in 1:length(c)){
d<-paste(d,c[j])
}
}else{
d<-c[1]
}
d<-as.character(d)
song_lyrics$lyrics[i]<-d
}
song_lyrics <- mutate(song_lyrics, lyrics = gsub(x = lyrics, pattern = "[Bridge]", replacement = " "))
song_lyrics <- mutate(song_lyrics, lyrics = gsub(x = lyrics, pattern = "[Verse]", replacement = " "))
song_lyrics <- mutate(song_lyrics, lyrics = gsub(x = lyrics, pattern = "[Chorus]", replacement = " "))
song_lyrics <- mutate(song_lyrics, lyrics = gsub(x = lyrics, pattern = "[0-9]+|[[:punct:]]|\\(.*\\)", replacement = " "))
song_lyrics <- mutate(song_lyrics, lyrics = gsub(x = lyrics, pattern = "\n", replacement = " "))
})
song_lyrics_tokenized<-reactive({
song_lyrics<-song_lyrics()
song_lyrics_tokenized <- song_lyrics() %>% unnest_tokens(output = "word",
input = lyrics,
token = "words",
drop=FALSE,to_lower=TRUE)
song_lyrics_tokenized<-song_lyrics_tokenized%>%select(song_id:artist_name,word)
song_lyrics_tokenized <- filter(song_lyrics_tokenized, substr(word, 1, 1) != '#',
substr(word, 1, 1) != '@')
correct_spelling <- function(input) {
output <- case_when(
# any manual corrections
input == 'license' ~ 'licence',
# check and (if required) correct spelling
!hunspell_check(input, dictionary('en_GB')) ~
hunspell_suggest(input, dictionary('en_GB')) %>%
# get first suggestion, or NA if suggestions list is empty
map(1, .default = NA) %>%
unlist(),
TRUE ~ input # if word is correct
)
ifelse(is.na(output), input, output)
}
song_lyrics_tokenized <- song_lyrics_tokenized %>%  mutate(suggestion = correct_spelling(word))
song_lyrics_tokenized <- song_lyrics_tokenized %>% anti_join(stopwords)
song_lyrics_tokenized <- song_lyrics_tokenized %>% dplyr::count(song_id,suggestion)
song_lyrics_tokenized<-song_lyrics_tokenized%>%select(suggestion,n)
song_lyrics_tokenized<-song_lyrics_tokenized%>%filter(nchar(suggestion)>3)
})
output$plot_word_cloud_song<-renderWordcloud2({
song_lyrics_tokenized<-song_lyrics_tokenized()
wordcloud2(song_lyrics_tokenized, size=2)
})
#--------------------
#Topic
topic_lyrics<-reactive({
#Ebi
topic_lyrics<-geniusr::search_song(input$topic_search_genius, n_results = 20, access_token = genius_token())
topic_lyrics<-data.frame(topic_lyrics)
topic_lyrics['lyrics']<-NA
for (i in 1:nrow(topic_lyrics)){
link<-topic_lyrics$song_lyrics_url[i]
doc_link<-read_html(link)
c<-doc_link%>%html_elements("div[class='Lyrics__Container-sc-1ynbvzw-6 jYfhrf']")%>%html_text2(preserve_nbsp = TRUE)
d<-NULL
if (length(c)>1){
for (j in 1:length(c)){
d<-paste(d,c[j])
}
}else{
d<-c[1]
}
d<-as.character(d)
topic_lyrics$lyrics[i]<-d
}
topic_lyrics <- mutate(topic_lyrics, lyrics = gsub(x = lyrics, pattern = "[Bridge]", replacement = " "))
topic_lyrics <- mutate(topic_lyrics, lyrics = gsub(x = lyrics, pattern = "[Verse]", replacement = " "))
topic_lyrics <- mutate(topic_lyrics, lyrics = gsub(x = lyrics, pattern = "[Chorus]", replacement = " "))
topic_lyrics <- mutate(topic_lyrics, lyrics = gsub(x = lyrics, pattern = "[0-9]+|[[:punct:]]|\\(.*\\)", replacement = " "))
topic_lyrics <- mutate(topic_lyrics, lyrics = gsub(x = lyrics, pattern = "\n", replacement = " "))
})
topic_lyrics_tokenized<-reactive({
topic_lyrics<-topic_lyrics()
topic_lyrics_tokenized <- topic_lyrics() %>% unnest_tokens(output = "word",
input = lyrics,
token = "words",
drop=FALSE,to_lower=TRUE)
topic_lyrics_tokenized<-topic_lyrics_tokenized%>%select(song_id:artist_name,word)
topic_lyrics_tokenized <- filter(topic_lyrics_tokenized, substr(word, 1, 1) != '#',
substr(word, 1, 1) != '@')
correct_spelling <- function(input) {
output <- case_when(
# any manual corrections
input == 'license' ~ 'licence',
# check and (if required) correct spelling
!hunspell_check(input, dictionary('en_GB')) ~
hunspell_suggest(input, dictionary('en_GB')) %>%
# get first suggestion, or NA if suggestions list is empty
map(1, .default = NA) %>%
unlist(),
TRUE ~ input # if word is correct
)
ifelse(is.na(output), input, output)
}
topic_lyrics_tokenized <- topic_lyrics_tokenized %>%  mutate(suggestion = correct_spelling(word))
topic_lyrics_tokenized <- topic_lyrics_tokenized %>% anti_join(stopwords)
topic_lyrics_tokenized <- topic_lyrics_tokenized %>% dplyr::count(song_id,suggestion)
topic_lyrics_tokenized<-topic_lyrics_tokenized%>%select(suggestion,n)
topic_lyrics_tokenized<-topic_lyrics_tokenized%>%filter(nchar(suggestion)>3)
})
output$plot_word_cloud_topic<-renderWordcloud2({
topic_lyrics_tokenized<-topic_lyrics_tokenized()
wordcloud2(topic_lyrics_tokenized, size=2)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(readr)
stopwords <- read_csv("stopwords.csv")
View(stopwords)
